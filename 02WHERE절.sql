-- WHERE 조건절
--SELECT * FROM EMPLOYEES WHERE JOB_ID = 'IT_PROG';
SELECT FIRST_NAME, JOB_ID FROM EMPLOYEES WHERE FIRST_NAME = 'David';
SELECT * FROM EMPLOYEES WHERE SALARY >= 15000;
SELECT * FROM EMPLOYEES WHERE DEPARTMENT_ID <> 90; -- <> 같지 않다
SELECT * FROM EMPLOYEES WHERE HIRE_DATE = '06/03/07'; -- 날짜 비교도 문자열로 함
SELECT * FROM EMPLOYEES WHERE HIRE_DATE >= '06/03/01'; -- 날짜도 대소 비교 가능함

-- BETWEEN AND연산자 ~사이에
SELECT * FROM EMPLOYEES WHERE SALARY BETWEEN 5000 AND 10000; -- 5000이상 10000이하
SELECT * FROM EMPLOYEES WHERE HIRE_DATE BETWEEN '03/01/01' AND '03/12/31'; -- 03년도 입사자

--IN 연산자
SELECT * FROM EMPLOYEES WHERE DEPARTMENT_ID IN (50,60,70); -- 부서 ID 50 이상 70 이하
SELECT * FROM EMPLOYEES WHERE JOB_ID IN ('IT_PROG', 'ST_MAN');

-- LIKE 연산자 -> 검색에 사용됨, 리티럴 문자 %와 함께
SELECT * FROM EMPLOYEES WHERE HIRE_DATE LIKE '03%'; -- 03으로 시작되는 문자
SELECT * FROM EMPLOYEES WHERE HIRE_DATE LIKE '%03'; -- 03으로 끝나는 문자
SELECT * FROM EMPLOYEES WHERE HIRE_DATE LIKE '%03%'; -- 03이 (어디에나) 들어가는 문자
SELECT * FROM EMPLOYEES WHERE JOB_ID LIKE '%MAN%'; -- 어느 부서건 매니저가 직업인 사람

-- LIKE _언더바와 함께 응용됨 
SELECT * FROM EMPLOYEES WHERE FIRST_NAME LIKE '_a'; -- '_a' 두글자이며 a로 끝나는 이름 (BA CA FA)
SELECT * FROM EMPLOYEES WHERE FIRST_NAME LIKE '_a%'; -- a가 두번째 글자인 이름

-- NULL 값 찾기 IS NULL, IS NOT NULL
SELECT * FROM EMPLOYEES WHERE COMMISSION_PCT IS NULL; -- COMMISSION  = NULL; 이러면 XXXXX
SELECT * FROM EMPLOYEES WHERE COMMISSION_PCT IS NOT NULL;

-- 논리 연산자 AND, OR / AND가 OR보다 연산 속도가 빠름
SELECT * FROM EMPLOYEES WHERE JOB_ID IN('IT_PROG','FI_MGR');
SELECT * FROM EMPLOYEES WHERE JOB_ID = 'IT_PROG' OR JOB_ID = 'FI_MGR';
SELECT * FROM EMPLOYEES WHERE JOB_ID = 'IT_PROG' OR SALARY >=5000;
SELECT * FROM EMPLOYEES WHERE JOB_ID = 'IT_PROG' AND SALARY >=5000;

SELECT * FROM EMPLOYEES WHERE JOB_ID = 'IT_PROG' OR JOB_ID = 'FI_MGR' AND SALARY >= 6000; --  JOB_ID = 'FI_MGR' AND SALARY >= 6000; 이게 먼저 연산됨
SELECT * FROM EMPLOYEES WHERE (JOB_ID = 'IT_PROG' OR JOB_ID = 'FI_MGR') AND SALARY >= 6000; -- ()로 묶으면 해결됨

-- NOT 부정의 의미, 연산 키워드와 같이 사용됨
SELECT * FROM EMPLOYEES WHERE DEPARTMENT_ID NOT IN (50,60);
SELECT * FROM EMPLOYEES WHERE JOB_ID NOT LIKE '%MAN%'; -- 매니저가 아닌 사람
SELECT * FROM EMPLOYEES WHERE DEPARTMENT_ID NOT BETWEEN 50 AND 60;

-- ORDER BY
SELECT * FROM EMPLOYEES ORDER BY SALARY; -- 기본값인 오름차순
SELECT * FROM EMPLOYEES ORDER BY SALARY DESC; -- 내림차순

SELECT FIRST_NAME, SALARY * 12 AS 연봉 FROM EMPLOYEES ORDER BY 연봉; -- 별칭을 ORDER절에서 사용할 수 있음 (ORDER절이 맨마지막에 동작하기 때문에)

-- 정렬 2개 이상의 COLUMN으로 시킬 수 있음
-- 부서 번호가 높은 사람 중,  급여가 높은 사람 기준으로 정렬하기
SELECT * FROM EMPLOYEES ORDER BY DEPARTMENT_ID DESC, SALARY DESC;

SELECT * FROM EMPLOYEES WHERE JOB_ID IN ('IT_PROG', 'SA_MAN') ORDER BY FIRST_NAME DESC;




